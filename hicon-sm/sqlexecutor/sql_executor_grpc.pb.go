// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: hicon-sm/sql_executor.proto

package sqlexecutor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SQLExecutor_UpsertConfiguration_FullMethodName = "/SQLExecutor/UpsertConfiguration"
	SQLExecutor_FindByPrimaryKeys_FullMethodName   = "/SQLExecutor/FindByPrimaryKeys"
	SQLExecutor_FindOne_FullMethodName             = "/SQLExecutor/FindOne"
	SQLExecutor_FindAll_FullMethodName             = "/SQLExecutor/FindAll"
	SQLExecutor_Exec_FullMethodName                = "/SQLExecutor/Exec"
	SQLExecutor_BulkInsert_FullMethodName          = "/SQLExecutor/BulkInsert"
	SQLExecutor_UpdateByPrimaryKeys_FullMethodName = "/SQLExecutor/UpdateByPrimaryKeys"
	SQLExecutor_BulkUpdate_FullMethodName          = "/SQLExecutor/BulkUpdate"
)

// SQLExecutorClient is the client API for SQLExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQLExecutorClient interface {
	UpsertConfiguration(ctx context.Context, in *UpsertConfiguration, opts ...grpc.CallOption) (*BaseResponse, error)
	FindByPrimaryKeys(ctx context.Context, in *FindByPrimaryKeys, opts ...grpc.CallOption) (*BaseResponse, error)
	FindOne(ctx context.Context, in *FindOne, opts ...grpc.CallOption) (*BaseResponse, error)
	FindAll(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*BaseResponse, error)
	Exec(ctx context.Context, in *Exec, opts ...grpc.CallOption) (*BaseResponse, error)
	BulkInsert(ctx context.Context, in *BulkInsert, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateByPrimaryKeys(ctx context.Context, in *UpdateByPrimaryKeys, opts ...grpc.CallOption) (*BaseResponse, error)
	BulkUpdate(ctx context.Context, in *BulkUpdate, opts ...grpc.CallOption) (*BaseResponse, error)
}

type sQLExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLExecutorClient(cc grpc.ClientConnInterface) SQLExecutorClient {
	return &sQLExecutorClient{cc}
}

func (c *sQLExecutorClient) UpsertConfiguration(ctx context.Context, in *UpsertConfiguration, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SQLExecutor_UpsertConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLExecutorClient) FindByPrimaryKeys(ctx context.Context, in *FindByPrimaryKeys, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SQLExecutor_FindByPrimaryKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLExecutorClient) FindOne(ctx context.Context, in *FindOne, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SQLExecutor_FindOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLExecutorClient) FindAll(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SQLExecutor_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLExecutorClient) Exec(ctx context.Context, in *Exec, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SQLExecutor_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLExecutorClient) BulkInsert(ctx context.Context, in *BulkInsert, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SQLExecutor_BulkInsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLExecutorClient) UpdateByPrimaryKeys(ctx context.Context, in *UpdateByPrimaryKeys, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SQLExecutor_UpdateByPrimaryKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLExecutorClient) BulkUpdate(ctx context.Context, in *BulkUpdate, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SQLExecutor_BulkUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQLExecutorServer is the server API for SQLExecutor service.
// All implementations must embed UnimplementedSQLExecutorServer
// for forward compatibility.
type SQLExecutorServer interface {
	UpsertConfiguration(context.Context, *UpsertConfiguration) (*BaseResponse, error)
	FindByPrimaryKeys(context.Context, *FindByPrimaryKeys) (*BaseResponse, error)
	FindOne(context.Context, *FindOne) (*BaseResponse, error)
	FindAll(context.Context, *FindAll) (*BaseResponse, error)
	Exec(context.Context, *Exec) (*BaseResponse, error)
	BulkInsert(context.Context, *BulkInsert) (*BaseResponse, error)
	UpdateByPrimaryKeys(context.Context, *UpdateByPrimaryKeys) (*BaseResponse, error)
	BulkUpdate(context.Context, *BulkUpdate) (*BaseResponse, error)
	mustEmbedUnimplementedSQLExecutorServer()
}

// UnimplementedSQLExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSQLExecutorServer struct{}

func (UnimplementedSQLExecutorServer) UpsertConfiguration(context.Context, *UpsertConfiguration) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertConfiguration not implemented")
}
func (UnimplementedSQLExecutorServer) FindByPrimaryKeys(context.Context, *FindByPrimaryKeys) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByPrimaryKeys not implemented")
}
func (UnimplementedSQLExecutorServer) FindOne(context.Context, *FindOne) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedSQLExecutorServer) FindAll(context.Context, *FindAll) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedSQLExecutorServer) Exec(context.Context, *Exec) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedSQLExecutorServer) BulkInsert(context.Context, *BulkInsert) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkInsert not implemented")
}
func (UnimplementedSQLExecutorServer) UpdateByPrimaryKeys(context.Context, *UpdateByPrimaryKeys) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByPrimaryKeys not implemented")
}
func (UnimplementedSQLExecutorServer) BulkUpdate(context.Context, *BulkUpdate) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdate not implemented")
}
func (UnimplementedSQLExecutorServer) mustEmbedUnimplementedSQLExecutorServer() {}
func (UnimplementedSQLExecutorServer) testEmbeddedByValue()                     {}

// UnsafeSQLExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLExecutorServer will
// result in compilation errors.
type UnsafeSQLExecutorServer interface {
	mustEmbedUnimplementedSQLExecutorServer()
}

func RegisterSQLExecutorServer(s grpc.ServiceRegistrar, srv SQLExecutorServer) {
	// If the following call pancis, it indicates UnimplementedSQLExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SQLExecutor_ServiceDesc, srv)
}

func _SQLExecutor_UpsertConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLExecutorServer).UpsertConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLExecutor_UpsertConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLExecutorServer).UpsertConfiguration(ctx, req.(*UpsertConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLExecutor_FindByPrimaryKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByPrimaryKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLExecutorServer).FindByPrimaryKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLExecutor_FindByPrimaryKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLExecutorServer).FindByPrimaryKeys(ctx, req.(*FindByPrimaryKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLExecutor_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOne)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLExecutorServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLExecutor_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLExecutorServer).FindOne(ctx, req.(*FindOne))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLExecutor_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLExecutorServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLExecutor_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLExecutorServer).FindAll(ctx, req.(*FindAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLExecutor_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Exec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLExecutorServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLExecutor_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLExecutorServer).Exec(ctx, req.(*Exec))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLExecutor_BulkInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkInsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLExecutorServer).BulkInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLExecutor_BulkInsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLExecutorServer).BulkInsert(ctx, req.(*BulkInsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLExecutor_UpdateByPrimaryKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByPrimaryKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLExecutorServer).UpdateByPrimaryKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLExecutor_UpdateByPrimaryKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLExecutorServer).UpdateByPrimaryKeys(ctx, req.(*UpdateByPrimaryKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLExecutor_BulkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLExecutorServer).BulkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLExecutor_BulkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLExecutorServer).BulkUpdate(ctx, req.(*BulkUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// SQLExecutor_ServiceDesc is the grpc.ServiceDesc for SQLExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQLExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SQLExecutor",
	HandlerType: (*SQLExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertConfiguration",
			Handler:    _SQLExecutor_UpsertConfiguration_Handler,
		},
		{
			MethodName: "FindByPrimaryKeys",
			Handler:    _SQLExecutor_FindByPrimaryKeys_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _SQLExecutor_FindOne_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _SQLExecutor_FindAll_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _SQLExecutor_Exec_Handler,
		},
		{
			MethodName: "BulkInsert",
			Handler:    _SQLExecutor_BulkInsert_Handler,
		},
		{
			MethodName: "UpdateByPrimaryKeys",
			Handler:    _SQLExecutor_UpdateByPrimaryKeys_Handler,
		},
		{
			MethodName: "BulkUpdate",
			Handler:    _SQLExecutor_BulkUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hicon-sm/sql_executor.proto",
}
